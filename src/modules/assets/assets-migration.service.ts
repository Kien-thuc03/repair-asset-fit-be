import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Asset } from 'src/entities/asset.entity';
import { Computer } from 'src/entities/computer.entity';
import { ComputerComponent } from 'src/entities/computer-component.entity';
import { ComponentType } from 'src/common/shared/ComponentType';
import { ComponentStatus } from 'src/common/shared/ComponentStatus';
import { Room } from 'src/entities/room.entity';

/**
 * Service ƒë·ªÉ migrate d·ªØ li·ªáu t·ª´ b·∫£ng Assets sang Computer v√† ComputerComponent
 * 
 * M·ª•c ƒë√≠ch: T√°ch th√¥ng tin specs trong Asset th√†nh c√°c b·∫£n ghi ri√™ng bi·ªát
 * trong Computer v√† ComputerComponent ƒë·ªÉ qu·∫£n l√Ω chi ti·∫øt h∆°n
 */
@Injectable()
export class AssetsMigrationService {
  private readonly logger = new Logger(AssetsMigrationService.name);

  constructor(
    @InjectRepository(Asset)
    private readonly assetRepository: Repository<Asset>,
    @InjectRepository(Computer)
    private readonly computerRepository: Repository<Computer>,
    @InjectRepository(Room)
    private readonly roomRepository: Repository<Room>,
    @InjectRepository(ComputerComponent)
    private readonly componentRepository: Repository<ComputerComponent>,
  ) {}

  /**
   * Parse specs string t·ª´ Asset ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin linh ki·ªán
   * 
   * V√≠ d·ª• specs: "M√°y t√≠nh ƒë·ªÉ b√†n Dell Vostro 270MT - Intel Pentium G2020, 2GB RAM, 500GB HDD, VGA Intel HD Graphics, DVDRW, Keybroad + Mouse"
   * 
   * @param specs - Chu·ªói specs t·ª´ asset
   * @returns M·∫£ng c√°c component ƒë∆∞·ª£c parse
   */
  private parseSpecs(specs: string): Array<{
    componentType: ComponentType;
    name: string;
    componentSpecs: string;
  }> {
    if (!specs) return [];

    const components: Array<{
      componentType: ComponentType;
      name: string;
      componentSpecs: string;
    }> = [];

    const specsLower = specs.toLowerCase();

    // Parse CPU
    const cpuPatterns = [
      /intel\s+(?:core\s+)?([a-z0-9\-]+)/i,
      /amd\s+(?:ryzen\s+)?([a-z0-9\-]+)/i,
      /pentium\s+([a-z0-9\-]+)/i,
      /celeron\s+([a-z0-9\-]+)/i,
    ];

    for (const pattern of cpuPatterns) {
      const match = specs.match(pattern);
      if (match) {
        components.push({
          componentType: ComponentType.CPU,
          name: match[0].trim(),
          componentSpecs: match[0].trim(),
        });
        break;
      }
    }

    // Parse RAM
    const ramMatch = specs.match(/(\d+)\s*gb\s+ram/i);
    if (ramMatch) {
      components.push({
        componentType: ComponentType.RAM,
        name: `RAM ${ramMatch[1]}GB`,
        componentSpecs: `${ramMatch[1]}GB`,
      });
    }

    // Parse Storage (HDD/SSD)
    const storagePatterns = [
      /(\d+)\s*gb\s+(?:hdd|ssd)/i,
      /(\d+)\s*tb\s+(?:hdd|ssd)/i,
    ];

    for (const pattern of storagePatterns) {
      const match = specs.match(pattern);
      if (match) {
        components.push({
          componentType: ComponentType.STORAGE,
          name: match[0].trim(),
          componentSpecs: match[0].trim(),
        });
        break;
      }
    }

    // Parse GPU
    const gpuPatterns = [
      /vga\s+([^,]+)/i,
      /nvidia\s+([^,]+)/i,
      /amd\s+radeon\s+([^,]+)/i,
      /intel\s+(?:hd|uhd|iris)\s+graphics\s*(\d*)/i,
    ];

    for (const pattern of gpuPatterns) {
      const match = specs.match(pattern);
      if (match) {
        components.push({
          componentType: ComponentType.GPU,
          name: match[0].trim(),
          componentSpecs: match[0].trim(),
        });
        break;
      }
    }

    // Parse Monitor (n·∫øu c√≥ t·ª´ kh√≥a monitor/m√†n h√¨nh)
    if (specsLower.includes('monitor') || specsLower.includes('m√†n h√¨nh')) {
      const monitorMatch = specs.match(/(?:monitor|m√†n\s*h√¨nh)\s*([^,]+)/i);
      if (monitorMatch) {
        components.push({
          componentType: ComponentType.MONITOR,
          name: monitorMatch[0].trim(),
          componentSpecs: monitorMatch[0].trim(),
        });
      }
    }

    // Parse Keyboard
    if (specsLower.includes('keyboard') || specsLower.includes('keybroad') || specsLower.includes('b√†n ph√≠m')) {
      components.push({
        componentType: ComponentType.KEYBOARD,
        name: 'Keyboard',
        componentSpecs: 'Standard Keyboard',
      });
    }

    // Parse Mouse
    if (specsLower.includes('mouse') || specsLower.includes('chu·ªôt')) {
      components.push({
        componentType: ComponentType.MOUSE,
        name: 'Mouse',
        componentSpecs: 'Standard Mouse',
      });
    }

    // Parse Optical Drive
    if (specsLower.includes('dvdrw') || specsLower.includes('dvd') || specsLower.includes('cd-rom')) {
      const driveMatch = specs.match(/(dvdrw|dvd-rw|cd-rom)/i);
      components.push({
        componentType: ComponentType.OPTICAL_DRIVE,
        name: driveMatch ? driveMatch[0].toUpperCase() : 'DVDRW',
        componentSpecs: driveMatch ? driveMatch[0].toUpperCase() : 'DVDRW',
      });
    }

    return components;
  }

  /**
   * Generate machine label t·ª´ room v√† s·ªë th·ª© t·ª±
   * @param building - T√™n t√≤a nh√†
   * @param floor - T·∫ßng c·ªßa ph√≤ng
   * @param roomNumber - T√™n ph√≤ng
   * @param roomCount - S·ªë m√°y ƒëang c√≥ trong ph√≤ng
   * @returns Machine label (v√≠ d·ª•: "H301M11")
   */
  private async generateMachineLabel(roomId: string): Promise<string> {
    const room = await this.roomRepository.findOne({ where: { id: roomId } });
    if (!room) {
      this.logger.warn(`Kh√¥ng t√¨m th·∫•y ph√≤ng v·ªõi ID ${roomId}`);
      return `PC-00`;
    }

    const roomCount = await this.computerRepository.count({ where: { roomId } });
    return `${room.building}${room.floor}${room.roomNumber}M${String(roomCount + 1).padStart(2, '0')}`;
  }

  /**
   * Migrate m·ªôt asset sang Computer v√† ComputerComponents
   * 
   * @param asset - Asset c·∫ßn migrate
   * @param machineIndex - S·ªë th·ª© t·ª± m√°y trong ph√≤ng
   * @returns Computer ƒë√£ ƒë∆∞·ª£c t·∫°o
   */
  async migrateAssetToComputer(
    asset: Asset,
    machineIndex: number,
  ): Promise<Computer | null> {
    try {
      // Ki·ªÉm tra asset ph·∫£i c√≥ roomId
      if (!asset.currentRoomId) {
        this.logger.warn(
          `Asset ${asset.ktCode} kh√¥ng c√≥ room_id, b·ªè qua migrate`,
        );
        return null;
      }

      // Ki·ªÉm tra ƒë√£ t·ªìn t·∫°i Computer cho asset n√†y ch∆∞a
      const existingComputer = await this.computerRepository.findOne({
        where: { assetId: asset.id },
      });

      if (existingComputer) {
        this.logger.warn(
          `Computer ƒë√£ t·ªìn t·∫°i cho asset ${asset.ktCode}, b·ªè qua`,
        );
        return existingComputer;
      }

      // T·∫°o Computer record
      const computer = this.computerRepository.create({
        assetId: asset.id,
        roomId: asset.currentRoomId,
        machineLabel: await this.generateMachineLabel(asset.currentRoomId),
        notes: `Migrated from asset: ${asset.name}`,
      });

      const savedComputer = await this.computerRepository.save(computer);
      this.logger.log(
        `‚úÖ T·∫°o Computer th√†nh c√¥ng cho asset ${asset.ktCode} - Machine: ${savedComputer.machineLabel}`,
      );

      // Parse specs v√† t·∫°o components
      const parsedComponents = this.parseSpecs(asset.specs || '');

      if (parsedComponents.length > 0) {
        const components = parsedComponents.map((comp) =>
          this.componentRepository.create({
            computerAssetId: savedComputer.id,
            componentType: comp.componentType,
            name: comp.name,
            componentSpecs: comp.componentSpecs,
            status: ComponentStatus.INSTALLED,
            installedAt: asset.entrydate || new Date(),
            notes: `Auto-parsed from asset specs`,
          }),
        );

        await this.componentRepository.save(components);
        this.logger.log(
          `‚úÖ T·∫°o ${components.length} components cho computer ${savedComputer.machineLabel}`,
        );
      } else {
        this.logger.warn(
          `‚ö†Ô∏è  Kh√¥ng parse ƒë∆∞·ª£c component n√†o t·ª´ specs c·ªßa asset ${asset.ktCode}`,
        );
      }

      return savedComputer;
    } catch (error) {
      const err = error as Error;
      this.logger.error(
        `‚ùå L·ªói khi migrate asset ${asset.ktCode}: ${err.message}`,
        err.stack,
      );
      throw error;
    }
  }

  /**
   * Migrate t·∫•t c·∫£ assets l√† m√°y t√≠nh sang Computer v√† ComputerComponents
   * 
   * @param categoryIds - M·∫£ng ID c·ªßa categories l√† m√°y t√≠nh (optional)
   * @returns K·∫øt qu·∫£ migrate
   */
  async migrateAllComputerAssets(
    categoryIds?: string[],
  ): Promise<{
    total: number;
    success: number;
    failed: number;
    skipped: number;
  }> {
    this.logger.log('üöÄ B·∫Øt ƒë·∫ßu migrate assets sang computers...');

    const result = {
      total: 0,
      success: 0,
      failed: 0,
      skipped: 0,
    };

    try {
      // Build query ƒë·ªÉ l·∫•y assets l√† m√°y t√≠nh
      const queryBuilder = this.assetRepository
        .createQueryBuilder('asset')
        .where('asset.deleted_at IS NULL');

      // N·∫øu c√≥ categoryIds, filter theo category
      if (categoryIds && categoryIds.length > 0) {
        queryBuilder.andWhere('asset.category_id IN (:...categoryIds)', {
          categoryIds,
        });
      }

      // Ho·∫∑c filter theo t√™n ch·ª©a "m√°y t√≠nh"/"computer"
      else {
        queryBuilder.andWhere(
          '(LOWER(asset.name) LIKE :computer1 OR LOWER(asset.name) LIKE :computer2)',
          {
            computer1: '%m√°y t√≠nh%',
            computer2: '%computer%',
          },
        );
      }

      const assets = await queryBuilder.getMany();
      result.total = assets.length;

      this.logger.log(`üìä T√¨m th·∫•y ${assets.length} assets c·∫ßn migrate`);

      // Group assets theo room ƒë·ªÉ t·∫°o machineLabel sequential
      const assetsByRoom = new Map<string, Asset[]>();
      for (const asset of assets) {
        if (asset.currentRoomId) {
          if (!assetsByRoom.has(asset.currentRoomId)) {
            assetsByRoom.set(asset.currentRoomId, []);
          }
          assetsByRoom.get(asset.currentRoomId)!.push(asset);
        }
      }

      // Migrate t·ª´ng room
      for (const [roomId, roomAssets] of assetsByRoom.entries()) {
        this.logger.log(
          `\nüìç Processing room ${roomId.slice(-8)} - ${roomAssets.length} assets`,
        );

        for (let i = 0; i < roomAssets.length; i++) {
          const asset = roomAssets[i];
          try {
            const computer = await this.migrateAssetToComputer(asset, i + 1);
            if (computer) {
              result.success++;
            } else {
              result.skipped++;
            }
          } catch (error) {
            result.failed++;
            const err = error as Error;
            this.logger.error(
              `Failed to migrate asset ${asset.ktCode}: ${err.message}`,
            );
          }
        }
      }

      // Assets kh√¥ng c√≥ room
      const assetsWithoutRoom = assets.filter((a) => !a.currentRoomId);
      if (assetsWithoutRoom.length > 0) {
        this.logger.warn(
          `‚ö†Ô∏è  ${assetsWithoutRoom.length} assets kh√¥ng c√≥ room_id, b·ªè qua`,
        );
        result.skipped += assetsWithoutRoom.length;
      }

      this.logger.log('\n' + '='.repeat(60));
      this.logger.log('üéâ Migration ho√†n t·∫•t!');
      this.logger.log(`üìä T·ªïng s·ªë: ${result.total}`);
      this.logger.log(`‚úÖ Th√†nh c√¥ng: ${result.success}`);
      this.logger.log(`‚è≠Ô∏è  B·ªè qua: ${result.skipped}`);
      this.logger.log(`‚ùå Th·∫•t b·∫°i: ${result.failed}`);
      this.logger.log('='.repeat(60));

      return result;
    } catch (error) {
      const err = error as Error;
      this.logger.error('‚ùå L·ªói nghi√™m tr·ªçng khi migrate:', err.stack);
      throw error;
    }
  }

  /**
   * Rollback - X√≥a t·∫•t c·∫£ Computer v√† ComputerComponent ƒë√£ migrate
   * ‚ö†Ô∏è CH√ö √ù: Ch·ªâ d√πng trong m√¥i tr∆∞·ªùng development/testing
   */
  async rollbackMigration(): Promise<{
    deletedComputers: number;
    deletedComponents: number;
  }> {
    this.logger.warn('‚ö†Ô∏è  B·∫ÆT ƒê·∫¶U ROLLBACK - X√ìA T·∫§T C·∫¢ D·ªÆ LI·ªÜU MIGRATE');

    // X√≥a t·∫•t c·∫£ components
    const componentsResult = await this.componentRepository
      .createQueryBuilder()
      .delete()
      .from(ComputerComponent)
      .execute();
    const deletedComponents =
      typeof componentsResult.affected === 'number'
        ? componentsResult.affected
        : 0;

    // X√≥a t·∫•t c·∫£ computers
    const computersResult = await this.computerRepository
      .createQueryBuilder()
      .delete()
      .from(Computer)
      .execute();
    const deletedComputers =
      typeof computersResult.affected === 'number'
        ? computersResult.affected
        : 0;

    this.logger.log(`üóëÔ∏è  ƒê√£ x√≥a ${deletedComputers} computers`);
    this.logger.log(`üóëÔ∏è  ƒê√£ x√≥a ${deletedComponents} components`);

    return {
      deletedComputers,
      deletedComponents,
    };
  }
}
