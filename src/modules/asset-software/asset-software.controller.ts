import {
  Controller,
  Post,
  Body,
  Get,
  Param,
  Put,
  Delete,
  Query,
  HttpCode,
  HttpStatus,
  UseGuards,
} from "@nestjs/common";
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiBearerAuth,
  ApiQuery,
  ApiBody,
} from "@nestjs/swagger";
import { AssetSoftwareService } from "./asset-software.service";
import { CreateAssetSoftwareDto } from "./dto/create-asset-software.dto";
import { UpdateAssetSoftwareDto } from "./dto/update-asset-software.dto";
import { AssetSoftwareResponseDto } from "./dto/asset-software-response.dto";
import { AssetSoftwareFilterDto } from "./dto/asset-software-filter.dto";
import { JwtAuthGuard } from "../auth/guards/jwt-auth.guard";
import { CurrentUser } from "../auth/decorators/current-user.decorator";
import { User } from "src/entities/user.entity";

@ApiTags("Asset Software")
@Controller("api/v1/asset-software")
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class AssetSoftwareController {
  constructor(private readonly assetSoftwareService: AssetSoftwareService) {}

  @Post()
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: "C√†i ƒë·∫∑t ph·∫ßn m·ªÅm l√™n t√†i s·∫£n",
    description: `
      ## üìã H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T PH·∫¶N M·ªÄM L√äN T√ÄI S·∫¢N

      ### üéØ M·ª•c ƒë√≠ch
      C√†i ƒë·∫∑t m·ªôt ph·∫ßn m·ªÅm c·ª• th·ªÉ l√™n t√†i s·∫£n m√°y t√≠nh trong h·ªá th·ªëng.

      ### üìù C√°c b∆∞·ªõc th·ª±c hi·ªán:

      **B∆∞·ªõc 1: Chu·∫©n b·ªã d·ªØ li·ªáu**
      - L·∫•y ID t√†i s·∫£n t·ª´ danh s√°ch assets (ch·ªâ assets c√≥ shape = 'COMPUTER')
      - L·∫•y ID ph·∫ßn m·ªÅm t·ª´ danh s√°ch software
      - Chu·∫©n b·ªã ng√†y c√†i ƒë·∫∑t (t√πy ch·ªçn, m·∫∑c ƒë·ªãnh l√† h√¥m nay)
      - Ghi ch√∫ v·ªÅ license key ho·∫∑c th√¥ng tin c√†i ƒë·∫∑t (t√πy ch·ªçn)

      **B∆∞·ªõc 2: G·ªçi API**
      \`\`\`json
      POST /api/v1/asset-software
      {
        "assetId": "48b11d82-dee9-4003-b34d-d6063cbb230a",
        "softwareId": "d52a67b3-155f-4d30-8134-94de8fecf657",
        "installationDate": "2024-01-15",
        "notes": "License key: ABC123-DEF456"
      }
      \`\`\`

      **B∆∞·ªõc 3: Ki·ªÉm tra k·∫øt qu·∫£**
      - H·ªá th·ªëng s·∫Ω tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt v·ªÅ vi·ªác c√†i ƒë·∫∑t
      - Bao g·ªìm th√¥ng tin t√†i s·∫£n, ph·∫ßn m·ªÅm v√† ph√≤ng hi·ªán t·∫°i

      ### ‚ö†Ô∏è ƒêi·ªÅu ki·ªán b·∫Øt bu·ªôc:
      - T√†i s·∫£n ph·∫£i t·ªìn t·∫°i v√† ch∆∞a b·ªã x√≥a
      - T√†i s·∫£n ph·∫£i c√≥ lo·∫°i 'COMPUTER' (shape = 'COMPUTER')
      - Ph·∫ßn m·ªÅm ph·∫£i t·ªìn t·∫°i v√† ch∆∞a b·ªã x√≥a
      - Ph·∫ßn m·ªÅm ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n n√†y tr∆∞·ªõc ƒë√≥
      - Ng∆∞·ªùi d√πng ph·∫£i ƒëƒÉng nh·∫≠p v√† c√≥ quy·ªÅn th·ª±c hi·ªán

      ### üìö D·ªØ li·ªáu m·∫´u:
      **T√†i s·∫£n m·∫´u:** "M√°y vi t√≠nh Vostro 270MT" (ID: 48b11d82-dee9-4003-b34d-d6063cbb230a)
      **Ph·∫ßn m·ªÅm m·∫´u:** "Microsoft Office 2021" (ID: d52a67b3-155f-4d30-8134-94de8fecf657)

      ### üîÑ K·∫øt qu·∫£ mong ƒë·ª£i:
      - Status: 201 Created
      - D·ªØ li·ªáu tr·∫£ v·ªÅ: Chi ti·∫øt v·ªÅ vi·ªác c√†i ƒë·∫∑t bao g·ªìm th√¥ng tin t√†i s·∫£n, ph·∫ßn m·ªÅm, ng√†y c√†i ƒë·∫∑t
    `,
  })
  @ApiBody({
    type: CreateAssetSoftwareDto,
    description: "D·ªØ li·ªáu c√†i ƒë·∫∑t ph·∫ßn m·ªÅm l√™n t√†i s·∫£n",
    examples: {
      "office-install": {
        summary: "üìä C√†i ƒë·∫∑t Microsoft Office 2021",
        description:
          "V√≠ d·ª• c√†i ƒë·∫∑t Microsoft Office v·ªõi license key v√† ghi ch√∫ chi ti·∫øt",
        value: {
          assetId: "48b11d82-dee9-4003-b34d-d6063cbb230a",
          softwareId: "d52a67b3-155f-4d30-8134-94de8fecf657",
          installationDate: "2024-01-15",
          notes:
            "License key: OFFICE-2021-PRO-PLUS. C√†i ƒë·∫∑t b·∫£n Professional Plus cho ph√≤ng Lab 1.",
        },
      },
      "autocad-install": {
        summary: "üé® C√†i ƒë·∫∑t AutoCAD 2024",
        description: "V√≠ d·ª• c√†i ƒë·∫∑t AutoCAD v·ªõi license gi√°o d·ª•c",
        value: {
          assetId: "48b11d82-dee9-4003-b34d-d6063cbb230a",
          softwareId: "9252568d-6bfd-47fb-969d-64bad9f1d193",
          installationDate: "2024-01-20",
          notes:
            "License gi√°o d·ª•c - S·ª≠ d·ª•ng cho m√¥n Thi·∫øt k·∫ø k·ªπ thu·∫≠t. C·∫•u h√¨nh cho sinh vi√™n.",
        },
      },
      "vscode-simple": {
        summary: "üíª C√†i ƒë·∫∑t Visual Studio Code (ƒë∆°n gi·∫£n)",
        description: "V√≠ d·ª• c√†i ƒë·∫∑t ƒë∆°n gi·∫£n ch·ªâ v·ªõi th√¥ng tin b·∫Øt bu·ªôc",
        value: {
          assetId: "48b11d82-dee9-4003-b34d-d6063cbb230a",
          softwareId: "1aa594ca-83f6-4b07-bad1-a6f88d5ece3f",
        },
      },
    },
  })
  @ApiResponse({
    status: HttpStatus.CREATED,
    description: "C√†i ƒë·∫∑t ph·∫ßn m·ªÅm th√†nh c√¥ng",
    type: AssetSoftwareResponseDto,
    schema: {
      example: {
        assetId: "48b11d82-dee9-4003-b34d-d6063cbb230a",
        softwareId: "d52a67b3-155f-4d30-8134-94de8fecf657",
        installationDate: "2024-01-15",
        notes: "License key: ABC123-DEF456",
        asset: {
          id: "48b11d82-dee9-4003-b34d-d6063cbb230a",
          ktCode: "1",
          fixedCode: "FC-001",
          name: "M√°y vi t√≠nh Vostro 270MT",
          type: "FIXED_ASSET",
          status: "IN_USE",
        },
        software: {
          id: "d52a67b3-155f-4d30-8134-94de8fecf657",
          name: "Microsoft Office 2021",
          version: "2021",
          publisher: "Microsoft",
        },
        room: {
          id: "room-123",
          name: "Ph√≤ng Lab 1",
          building: "T√≤a A",
          floor: "T·∫ßng 2",
          roomNumber: "A201",
        },
      },
    },
  })
  @ApiResponse({
    status: HttpStatus.BAD_REQUEST,
    description: "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c t√†i s·∫£n kh√¥ng ph√π h·ª£p",
    schema: {
      examples: {
        "not-computer": {
          summary: "T√†i s·∫£n kh√¥ng ph·∫£i m√°y t√≠nh",
          value: {
            statusCode: 400,
            message: "Ch·ªâ c√≥ th·ªÉ c√†i ƒë·∫∑t ph·∫ßn m·ªÅm l√™n t√†i s·∫£n m√°y t√≠nh",
            error: "Bad Request",
          },
        },
        "asset-deleted": {
          summary: "T√†i s·∫£n ƒë√£ b·ªã x√≥a",
          value: {
            statusCode: 400,
            message: "T√†i s·∫£n n√†y ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ c√†i ƒë·∫∑t ph·∫ßn m·ªÅm",
            error: "Bad Request",
          },
        },
        "validation-error": {
          summary: "L·ªói validation d·ªØ li·ªáu",
          value: {
            statusCode: 400,
            message: [
              "ID t√†i s·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
              "ID ph·∫ßn m·ªÅm ph·∫£i l√† UUID h·ª£p l·ªá",
            ],
            error: "Bad Request",
          },
        },
      },
    },
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "üîç Kh√¥ng t√¨m th·∫•y t√†i s·∫£n ho·∫∑c ph·∫ßn m·ªÅm",
    schema: {
      examples: {
        "asset-not-found": {
          summary: "Kh√¥ng t√¨m th·∫•y t√†i s·∫£n",
          value: {
            statusCode: 404,
            message:
              "Kh√¥ng t√¨m th·∫•y t√†i s·∫£n v·ªõi ID: 48b11d82-dee9-4003-b34d-d6063cbb230a",
            error: "Not Found",
          },
        },
        "software-not-found": {
          summary: "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm",
          value: {
            statusCode: 404,
            message:
              "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm v·ªõi ID: d52a67b3-155f-4d30-8134-94de8fecf657",
            error: "Not Found",
          },
        },
      },
    },
  })
  @ApiResponse({
    status: HttpStatus.CONFLICT,
    description: "‚ö†Ô∏è Ph·∫ßn m·ªÅm ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n n√†y",
    schema: {
      example: {
        statusCode: 409,
        message:
          'Ph·∫ßn m·ªÅm "Microsoft Office 2021" ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n n√†y',
        error: "Conflict",
        suggestion:
          "S·ª≠ d·ª•ng PUT ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c√†i ƒë·∫∑t hi·ªán c√≥ ho·∫∑c DELETE ƒë·ªÉ g·ª° tr∆∞·ªõc khi c√†i l·∫°i",
      },
    },
  })
  @ApiResponse({
    status: HttpStatus.UNAUTHORIZED,
    description: "Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá",
  })
  async create(
    @Body() createAssetSoftwareDto: CreateAssetSoftwareDto,
    @CurrentUser() user: User
  ): Promise<AssetSoftwareResponseDto> {
    return this.assetSoftwareService.create(createAssetSoftwareDto, user);
  }

  @Get()
  @ApiOperation({
    summary: "L·∫•y danh s√°ch ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t",
    description: `
      L·∫•y danh s√°ch t·∫•t c·∫£ ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n c√°c t√†i s·∫£n v·ªõi kh·∫£ nƒÉng l·ªçc v√† ph√¢n trang.
      
      **T√≠nh nƒÉng:**
      - Ph√¢n trang v·ªõi page v√† limit
      - L·ªçc theo t√†i s·∫£n ho·∫∑c ph·∫ßn m·ªÅm
      - T√¨m ki·∫øm theo t√™n t√†i s·∫£n ho·∫∑c ph·∫ßn m·ªÅm
      - S·∫Øp x·∫øp theo c√°c tr∆∞·ªùng kh√°c nhau
    `,
  })
  @ApiQuery({
    name: "page",
    required: false,
    description: "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)",
    example: 1,
  })
  @ApiQuery({
    name: "limit",
    required: false,
    description: "S·ªë l∆∞·ª£ng item tr√™n m·ªói trang",
    example: 10,
  })
  @ApiQuery({
    name: "assetId",
    required: false,
    description: "L·ªçc theo ID t√†i s·∫£n",
  })
  @ApiQuery({
    name: "softwareId",
    required: false,
    description: "L·ªçc theo ID ph·∫ßn m·ªÅm",
  })
  @ApiQuery({
    name: "search",
    required: false,
    description: "T√¨m ki·∫øm theo t√™n t√†i s·∫£n ho·∫∑c t√™n ph·∫ßn m·ªÅm",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "L·∫•y danh s√°ch th√†nh c√¥ng",
    schema: {
      example: {
        data: [],
        total: 0,
        page: 1,
        limit: 10,
        totalPages: 0,
      },
    },
  })
  async findAll(@Query() filter: AssetSoftwareFilterDto) {
    return this.assetSoftwareService.findAll(filter);
  }

  @Get(":assetId/:softwareId")
  @ApiOperation({
    summary: "L·∫•y th√¥ng tin chi ti·∫øt ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t",
    description:
      "L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n m·ªôt t√†i s·∫£n c·ª• th·ªÉ",
  })
  @ApiParam({
    name: "assetId",
    description: "ID c·ªßa t√†i s·∫£n",
    example: "123e4567-e89b-12d3-a456-426614174000",
  })
  @ApiParam({
    name: "softwareId",
    description: "ID c·ªßa ph·∫ßn m·ªÅm",
    example: "123e4567-e89b-12d3-a456-426614174001",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "L·∫•y th√¥ng tin chi ti·∫øt th√†nh c√¥ng",
    type: AssetSoftwareResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n",
    schema: {
      example: {
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n",
        error: "Not Found",
      },
    },
  })
  async findOne(
    @Param("assetId") assetId: string,
    @Param("softwareId") softwareId: string
  ): Promise<AssetSoftwareResponseDto> {
    return this.assetSoftwareService.findOne(assetId, softwareId);
  }

  @Put(":assetId/:softwareId")
  @ApiOperation({
    summary: "C·∫≠p nh·∫≠t th√¥ng tin c√†i ƒë·∫∑t ph·∫ßn m·ªÅm",
    description: `
      C·∫≠p nh·∫≠t th√¥ng tin v·ªÅ vi·ªác c√†i ƒë·∫∑t ph·∫ßn m·ªÅm tr√™n t√†i s·∫£n.
      
      **C√≥ th·ªÉ c·∫≠p nh·∫≠t:**
      - Ng√†y c√†i ƒë·∫∑t
      - Ghi ch√∫ (v√≠ d·ª•: key license)
    `,
  })
  @ApiParam({
    name: "assetId",
    description: "ID c·ªßa t√†i s·∫£n",
    example: "123e4567-e89b-12d3-a456-426614174000",
  })
  @ApiParam({
    name: "softwareId",
    description: "ID c·ªßa ph·∫ßn m·ªÅm",
    example: "123e4567-e89b-12d3-a456-426614174001",
  })
  @ApiBody({ type: UpdateAssetSoftwareDto })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
    type: AssetSoftwareResponseDto,
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n",
    schema: {
      example: {
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n",
        error: "Not Found",
      },
    },
  })
  async update(
    @Param("assetId") assetId: string,
    @Param("softwareId") softwareId: string,
    @Body() updateAssetSoftwareDto: UpdateAssetSoftwareDto,
    @CurrentUser() user: User
  ): Promise<AssetSoftwareResponseDto> {
    return this.assetSoftwareService.update(
      assetId,
      softwareId,
      updateAssetSoftwareDto,
      user
    );
  }

  @Delete(":assetId/:softwareId")
  @ApiOperation({
    summary: "G·ª° ph·∫ßn m·ªÅm kh·ªèi t√†i s·∫£n",
    description: `
      G·ª° b·ªè m·ªôt ph·∫ßn m·ªÅm kh·ªèi m·ªôt t√†i s·∫£n c·ª• th·ªÉ.
      
      **L∆∞u √Ω:**
      - Ch·ªâ x√≥a b·∫£n ghi c√†i ƒë·∫∑t, kh√¥ng x√≥a ph·∫ßn m·ªÅm ho·∫∑c t√†i s·∫£n
      - Ghi log ho·∫°t ƒë·ªông
    `,
  })
  @ApiParam({
    name: "assetId",
    description: "ID c·ªßa t√†i s·∫£n",
    example: "123e4567-e89b-12d3-a456-426614174000",
  })
  @ApiParam({
    name: "softwareId",
    description: "ID c·ªßa ph·∫ßn m·ªÅm",
    example: "123e4567-e89b-12d3-a456-426614174001",
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "G·ª° ph·∫ßn m·ªÅm th√†nh c√¥ng",
    schema: {
      example: {
        message: "G·ª° ph·∫ßn m·ªÅm th√†nh c√¥ng",
      },
    },
  })
  @ApiResponse({
    status: HttpStatus.NOT_FOUND,
    description: "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n",
    schema: {
      example: {
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n t√†i s·∫£n",
        error: "Not Found",
      },
    },
  })
  async remove(
    @Param("assetId") assetId: string,
    @Param("softwareId") softwareId: string,
    @CurrentUser() user: User
  ): Promise<{ message: string }> {
    return this.assetSoftwareService.remove(assetId, softwareId, user);
  }

  @Get("asset/:assetId")
  @ApiOperation({
    summary: "L·∫•y danh s√°ch ph·∫ßn m·ªÅm c·ªßa m·ªôt t√†i s·∫£n",
    description:
      "L·∫•y danh s√°ch t·∫•t c·∫£ ph·∫ßn m·ªÅm ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n m·ªôt t√†i s·∫£n c·ª• th·ªÉ",
  })
  @ApiParam({
    name: "assetId",
    description: "ID c·ªßa t√†i s·∫£n",
    example: "123e4567-e89b-12d3-a456-426614174000",
  })
  @ApiQuery({
    name: "page",
    required: false,
    description: "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)",
    example: 1,
  })
  @ApiQuery({
    name: "limit",
    required: false,
    description: "S·ªë l∆∞·ª£ng item tr√™n m·ªói trang",
    example: 10,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "L·∫•y danh s√°ch th√†nh c√¥ng",
    schema: {
      example: {
        data: [],
        total: 0,
        page: 1,
        limit: 10,
        totalPages: 0,
      },
    },
  })
  async findByAsset(
    @Param("assetId") assetId: string,
    @Query() filter: AssetSoftwareFilterDto
  ) {
    filter.assetId = assetId;
    return this.assetSoftwareService.findAll(filter);
  }

  @Get("software/:softwareId")
  @ApiOperation({
    summary: "L·∫•y danh s√°ch t√†i s·∫£n c√≥ c√†i m·ªôt ph·∫ßn m·ªÅm",
    description: "L·∫•y danh s√°ch t·∫•t c·∫£ t√†i s·∫£n ƒë√£ c√†i ƒë·∫∑t m·ªôt ph·∫ßn m·ªÅm c·ª• th·ªÉ",
  })
  @ApiParam({
    name: "softwareId",
    description: "ID c·ªßa ph·∫ßn m·ªÅm",
    example: "123e4567-e89b-12d3-a456-426614174001",
  })
  @ApiQuery({
    name: "page",
    required: false,
    description: "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)",
    example: 1,
  })
  @ApiQuery({
    name: "limit",
    required: false,
    description: "S·ªë l∆∞·ª£ng item tr√™n m·ªói trang",
    example: 10,
  })
  @ApiResponse({
    status: HttpStatus.OK,
    description: "L·∫•y danh s√°ch th√†nh c√¥ng",
    schema: {
      example: {
        data: [],
        total: 0,
        page: 1,
        limit: 10,
        totalPages: 0,
      },
    },
  })
  async findBySoftware(
    @Param("softwareId") softwareId: string,
    @Query() filter: AssetSoftwareFilterDto
  ) {
    filter.softwareId = softwareId;
    return this.assetSoftwareService.findAll(filter);
  }
}
